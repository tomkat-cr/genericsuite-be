######################################
# GenericSuite General Configuration #
######################################
#
# Aplicacion name
APP_NAME=ExampleApp
# Aplicacion domain
APP_DOMAIN_NAME=exampleapp.com
# Aplicacion AI assistant name
AI_ASSISTANT_NAME=ExampleBot
# Application default language
DEFAULT_LANG=en
#
# # PROD
# APP_DEBUG=0
# APP_STAGE=prod
# # QA
# APP_DEBUG=1
# APP_STAGE=qa
# DEV
# Application debug (0,1)
APP_DEBUG=1
# Application environment: dev, qa, staging, prod
APP_STAGE=dev
# Application super admin email
APP_SUPERADMIN_EMAIL=xxxx
# Application secret key (to set password encryption)
APP_SECRET_KEY=xxxx
# Storage seed (to set storage URL encryption -e.g. AWS S3-)
STORAGE_URL_SEED=yyy
#
# Database configuration
#
# For AWS DynamoDB
# # DEV: docker
# APP_DB_ENGINE_DEV=DYNAMO_DB
# APP_DB_NAME_DEV=
# APP_DB_URI_DEV=http://localhost:8000
# # QA: AWS DynamoDB
# APP_DB_ENGINE_QA=DYNAMO_DB
# APP_DB_NAME_QA=
# APP_DB_URI_QA=
# # PROD: AWS DynamoDB
# APP_DB_ENGINE_PROD=DYNAMO_DB
# APP_DB_NAME_PROD=
# APP_DB_URI_PROD=
# # DEMO: AWS DynamoDB
# APP_DB_ENGINE_DEMO=DYNAMO_DB
# APP_DB_NAME_DEMO=
# APP_DB_URI_DEMO=
#
# For MongoDB
# DEV: Docker container
APP_DB_ENGINE_DEV=MONGO_DB
APP_DB_NAME_DEV=mongo
APP_DB_URI_DEV=mongodb://root:example@app.exampleapp.local:27017/
APP_CORS_ORIGIN_DEV=*
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_DEV=exampleapp-chatbot-attachments-dev
# QA: MongoDB Atlas
APP_DB_ENGINE_QA=MONGO_DB
APP_DB_NAME_QA=xxxx
APP_DB_URI_QA=mongodb+srv://<user>:<password>@<cluster>.mongodb.net
APP_CORS_ORIGIN_QA=*
APP_CORS_ORIGIN_QA_CLOUD=https://app-qa.exampleapp.com
APP_CORS_ORIGIN_QA_LOCAL=http://localhost:3000
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_QA=exampleapp-chatbot-attachments-qa
# Staging: MongoDB Atlas
APP_DB_ENGINE_STAGING=MONGO_DB
APP_DB_NAME_STAGING=xxxx
APP_DB_URI_STAGING=mongodb+srv://<user>:<password>@<cluster>.mongodb.net
APP_CORS_ORIGIN_STAGING=https://app-staging.exampleapp.com
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_STAGING=exampleapp-chatbot-attachments-staging
# PROD: MongoDB Atlas
APP_DB_ENGINE_PROD=MONGO_DB
APP_DB_NAME_PROD=xxxx
APP_DB_URI_PROD=mongodb+srv://<user>:<password>@<cluster>.mongodb.net
APP_CORS_ORIGIN_PROD=https://app.exampleapp.com
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_PROD=exampleapp-chatbot-attachments-prod
# DEMO: MongoDB Atlas
APP_DB_ENGINE_DEMO=MONGO_DB
APP_DB_NAME_DEMO=xxxx
APP_DB_URI_DEMO=mongodb+srv://<user>:<password>@<cluster>.mongodb.net
APP_CORS_ORIGIN_DEMO=https://app-demo.exampleapp.com
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_DEMO=exampleapp-chatbot-attachments-demo
#
# Current framework options: chalice, flask, fastapi
CURRENT_FRAMEWORK=chalice
#
# JSON configuration files location and git URL
GIT_SUBMODULE_LOCAL_PATH=lib/config_dbdef
GIT_SUBMODULE_URL=git://github.com/username/exampleapp_configs.git
#
# Forntend application path (to copy version file during big lambdas deployment)
FRONTEND_PATH=../exampleapp_frontend
#
# Local python version
PYTHON_VERSION=3.11.5
#
# IAAS Cloud provider
#
CLOUD_PROVIDER=aws
#
# AWS Configuration
#
# Region for this App all AWS services
AWS_REGION=aws-region
# AWS Lambda Function and API Gateway base name
AWS_LAMBDA_FUNCTION_NAME=exampleapp-backend
# AWS SSL certificate ARN (used by big_lambdas_manager.sh)
AWS_SSL_CERTIFICATE_ARN=arn:aws:acm:AWS-REGION:AWS-ACCOUNT:certificate/AWS-CERTIFICATE-UUID
# AWS Lambda function role:
# These variables are used only if deploy without AWS SAM (deploy_without_sam) in big_lambdas_manager.sh. SAM generates this role automatically
AWS_LAMBDA_FUNCTION_ROLE_QA=exampleapp-api_handler-role-qa
AWS_LAMBDA_FUNCTION_ROLE_STAGING=exampleapp-api_handler-role-staging
AWS_LAMBDA_FUNCTION_ROLE_DEMO=exampleapp-api_handler-role-demo
AWS_LAMBDA_FUNCTION_ROLE_PROD=exampleapp-api_handler-role-prod
# AWS S3 bucket name (used by set_fe_cloudfront_domain.sh to set the CloudFront domain name in the frontend for the CORS config)
AWS_S3_BUCKET_NAME_FE=exampleapp-frontend-website-[STAGE]
#
# Development URL masking external hostname (for features like AI Vision)
URL_MASK_EXTERNAL_HOSTNAME=app-dev.exampleapp.com
#
# SMTP Mail configuration
SMTP_SERVER=smtp_server
SMTP_PORT=smtp_port
SMTP_USER=smtp_user
SMTP_PASSWORD=smtp_password
SMTP_DEFAULT_SENDER=sender_email
#
# Docker configuration
DOCKER_ACCOUNT=docker_account_username
#
# Local development environment run configuration
#
# Options are: uvicorn, gunicorn, chalice, chalice_docker
#
# Chalice case: "chalice" to use http (running without docker) or "chalice_docker" to use https (with docker)
# http:
# RUN_METHOD="chalice"
# https:
RUN_METHOD="chalice_docker"
#
# Tests configuration
#
# Testing endpoint
TEST_APP_URL=http://app.exampleapp.local:5001
#
# Default App main code directory
# for Chalice:
# https://aws.github.io/chalice/topics/packaging.html
# APP_DIR='.'
# for FastAPI:
# https://fastapi.tiangolo.com/tutorial/bigger-applications/?h=directory+structure#an-example-file-structure
# APP_DIR='app'
# for Flask:
# https://flask.palletsprojects.com/en/2.3.x/tutorial/layout/
# APP_DIR='flaskr'
#
# Default App entry point code file
# for Chalice:
# https://aws.github.io/chalice/topics/packaging.html
# APP_MAIN_FILE='app'
# for FastAPI:
# https://fastapi.tiangolo.com/tutorial/bigger-applications/?h=directory+structure#an-example-file-structure
# APP_MAIN_FILE='main'
# for Flask:
# https://flask.palletsprojects.com/en/2.3.x/tutorial/factory/
# APP_MAIN_FILE='__init__'
#
# Flask configuration
FLASK_APP=__init__.py
#
# Local frontend port (defautls to 3000)
FRONTEND_LOCAL_PORT=3000
# Local backend API port (defaults to 5001)
BACKEND_LOCAL_PORT=5001
